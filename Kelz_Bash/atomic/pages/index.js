import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import algosdk from "algosdk";

export default function Home() {
  const baseServer = "https://testnet-algorand.api.purestake.io/ps2";
  const port = "";
  const token = {
    "X-API-key": "YpG0KO7uiT6GkDZF2u4ng1poAqgQG3Zs3Wkv2f5L", // API KEY
  };
  let manA = "";
  let manB = "";
  let manC = "";
  let algodClient = new algosdk.Algodv2(token, baseServer, port);
  const generate = async () => {
    try {
      manA = algosdk.generateAccount();
      manB = algosdk.generateAccount();
      manC = algosdk.generateAccount();
      document.getElementById("first").innerHTML += manA.addr;
      document.getElementById("second").innerHTML += manB.addr;
      document.getElementById("third").innerHTML += manC.addr;
    } catch (error) {
      console.log(error);
    }
  };
  const submit = async () => {
    try {
      let params = await algodClient.getTransactionParams().do();
      // Transaction A to C
      let transaction1 = algosdk.makePaymentTxnWithSuggestedParams(
        manA.addr,
        manB.addr,
        100000,
        undefined,
        undefined,
        params
      );
      // Create transaction B to A
      let transaction2 = algosdk.makePaymentTxnWithSuggestedParams(
        manA.addr,
        manC.addr,
        100000,
        undefined,
        undefined,
        params
      );
      // Combine transactions
      let txns = [transaction1, transaction2];
      // Sign each transaction in the group
      let txGroup = algosdk.assignGroupID(txns);
      // Group both transactions
      let signedTx1 = transaction1.signTxn(manA.sk);
      let signedTx2 = transaction2.signTxn(manA.sk);
      let signed = [];
      signed.push(signedTx1);
      signed.push(signedTx2);

      console.log(signed);
      let tx = await algodClient.sendRawTransaction(signed).do();

      document.getElementById("tx").innerHTML += "TX ID: " + tx.txId;
      // Wait for transaction to be confirmed
      await waitForConfirmation(algodClient, tx.txId, 10);
      console.log("done");
    } catch (error) {
      console.log(error);
    }
  };
  const waitForConfirmation = async (algodClient, txId, timeout) => {
    if (algodClient == null || txId == null || timeout < 0) {
      throw new Error("Bad arguments");
    }

    const status = await algodClient.status().do();
    if (status === undefined) {
      throw new Error("Unable to get node status");
    }

    const startround = status["last-round"] + 1;
    let currentround = startround;

    while (currentround < startround + timeout) {
      const pendingInfo = await algodClient
        .pendingTransactionInformation(txId)
        .do();
      if (pendingInfo !== undefined) {
        if (
          pendingInfo["confirmed-round"] !== null &&
          pendingInfo["confirmed-round"] > 0
        ) {
          //Got the completed Transaction
          return pendingInfo;
        } else {
          if (
            pendingInfo["pool-error"] != null &&
            pendingInfo["pool-error"].length > 0
          ) {
            // If there was a pool error, then the transaction has been rejected!
            throw new Error(
              "Transaction " +
                txId +
                " rejected - pool error: " +
                pendingInfo["pool-error"]
            );
          }
        }
      }
      await algodClient.statusAfterBlock(currentround).do();
      currentround++;
    }
    throw new Error(
      "Transaction " + txId + " not confirmed after " + timeout + " rounds!"
    );
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1>
        <span>A</span>
        <span>t</span>
        <span>o</span>
        <span>m</span>
        <span>i</span>
        <span>c</span>
        <span>T</span>
        <span>r</span>
        <span>a</span>
        <span>n</span>
        <span>s</span>
        <span>f</span>
        <span>e</span>
        <span>r</span>
      </h1>
      <div className="ma">
        <button id="gen" onClick={generate}>
          Generate
        </button>
        <h4>Generate multiple accounts</h4>
        <button id="submit" onClick={submit}>
          Submit Group Transaction
        </button>
      </div>
      <div className="address">
        <p id="first"></p>
        <p id="second"></p>
        <p id="third"></p>
        <p id="tx"></p>
      </div>
      <h1>
        <span>B</span>
        <span>y</span>
        <br />
        <span>K</span>
        <span>e</span>
        <span>l</span>
        <span>z</span>
        <span>l</span>
        <span>e</span>
        <span>o</span>
      </h1>
    </div>
  );
}
